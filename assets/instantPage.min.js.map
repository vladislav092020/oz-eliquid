{"version":3,"sources":["webpack://superstore/./node_modules/instant.page/instantpage.js","webpack://superstore/webpack/bootstrap","webpack://superstore/webpack/runtime/compat get default export","webpack://superstore/webpack/runtime/define property getters","webpack://superstore/webpack/runtime/hasOwnProperty shorthand"],"names":[],"mappings":";;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,8DAA8D,cAAc;;AAE5E;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,GAAG,GAAG,0CAA0C;;AAEhD,+CAA+C,6DAA6D;AAC5G;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;UC3OA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCrBA;WACA;WACA;WACA,cAAc,0BAA0B,EAAE;WAC1C,cAAc,eAAe;WAC7B,gCAAgC,YAAY;WAC5C;WACA,E;;;;;WCPA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,6CAA6C,wDAAwD,E","file":"instantPage.min.js","sourcesContent":["/*! instant.page v5.1.0 - (C) 2019-2020 Alexandre Dieulot - https://instant.page/license */\n\nlet mouseoverTimer\nlet lastTouchTimestamp\nconst prefetches = new Set()\nconst prefetchElement = document.createElement('link')\nconst isSupported = prefetchElement.relList && prefetchElement.relList.supports && prefetchElement.relList.supports('prefetch')\n                    && window.IntersectionObserver && 'isIntersecting' in IntersectionObserverEntry.prototype\nconst allowQueryString = 'instantAllowQueryString' in document.body.dataset\nconst allowExternalLinks = 'instantAllowExternalLinks' in document.body.dataset\nconst useWhitelist = 'instantWhitelist' in document.body.dataset\nconst mousedownShortcut = 'instantMousedownShortcut' in document.body.dataset\nconst DELAY_TO_NOT_BE_CONSIDERED_A_TOUCH_INITIATED_ACTION = 1111\n\nlet delayOnHover = 65\nlet useMousedown = false\nlet useMousedownOnly = false\nlet useViewport = false\n\nif ('instantIntensity' in document.body.dataset) {\n  const intensity = document.body.dataset.instantIntensity\n\n  if (intensity.substr(0, 'mousedown'.length) == 'mousedown') {\n    useMousedown = true\n    if (intensity == 'mousedown-only') {\n      useMousedownOnly = true\n    }\n  }\n  else if (intensity.substr(0, 'viewport'.length) == 'viewport') {\n    if (!(navigator.connection && (navigator.connection.saveData || (navigator.connection.effectiveType && navigator.connection.effectiveType.includes('2g'))))) {\n      if (intensity == \"viewport\") {\n        /* Biggest iPhone resolution (which we want): 414 × 896 = 370944\n         * Small 7\" tablet resolution (which we don’t want): 600 × 1024 = 614400\n         * Note that the viewport (which we check here) is smaller than the resolution due to the UI’s chrome */\n        if (document.documentElement.clientWidth * document.documentElement.clientHeight < 450000) {\n          useViewport = true\n        }\n      }\n      else if (intensity == \"viewport-all\") {\n        useViewport = true\n      }\n    }\n  }\n  else {\n    const milliseconds = parseInt(intensity)\n    if (!isNaN(milliseconds)) {\n      delayOnHover = milliseconds\n    }\n  }\n}\n\nif (isSupported) {\n  const eventListenersOptions = {\n    capture: true,\n    passive: true,\n  }\n\n  if (!useMousedownOnly) {\n    document.addEventListener('touchstart', touchstartListener, eventListenersOptions)\n  }\n\n  if (!useMousedown) {\n    document.addEventListener('mouseover', mouseoverListener, eventListenersOptions)\n  }\n  else if (!mousedownShortcut) {\n      document.addEventListener('mousedown', mousedownListener, eventListenersOptions)\n  }\n\n  if (mousedownShortcut) {\n    document.addEventListener('mousedown', mousedownShortcutListener, eventListenersOptions)\n  }\n\n  if (useViewport) {\n    let triggeringFunction\n    if (window.requestIdleCallback) {\n      triggeringFunction = (callback) => {\n        requestIdleCallback(callback, {\n          timeout: 1500,\n        })\n      }\n    }\n    else {\n      triggeringFunction = (callback) => {\n        callback()\n      }\n    }\n\n    triggeringFunction(() => {\n      const intersectionObserver = new IntersectionObserver((entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            const linkElement = entry.target\n            intersectionObserver.unobserve(linkElement)\n            preload(linkElement.href)\n          }\n        })\n      })\n\n      document.querySelectorAll('a').forEach((linkElement) => {\n        if (isPreloadable(linkElement)) {\n          intersectionObserver.observe(linkElement)\n        }\n      })\n    })\n  }\n}\n\nfunction touchstartListener(event) {\n  /* Chrome on Android calls mouseover before touchcancel so `lastTouchTimestamp`\n   * must be assigned on touchstart to be measured on mouseover. */\n  lastTouchTimestamp = performance.now()\n\n  const linkElement = event.target.closest('a')\n\n  if (!isPreloadable(linkElement)) {\n    return\n  }\n\n  preload(linkElement.href)\n}\n\nfunction mouseoverListener(event) {\n  if (performance.now() - lastTouchTimestamp < DELAY_TO_NOT_BE_CONSIDERED_A_TOUCH_INITIATED_ACTION) {\n    return\n  }\n\n  const linkElement = event.target.closest('a')\n\n  if (!isPreloadable(linkElement)) {\n    return\n  }\n\n  linkElement.addEventListener('mouseout', mouseoutListener, {passive: true})\n\n  mouseoverTimer = setTimeout(() => {\n    preload(linkElement.href)\n    mouseoverTimer = undefined\n  }, delayOnHover)\n}\n\nfunction mousedownListener(event) {\n  const linkElement = event.target.closest('a')\n\n  if (!isPreloadable(linkElement)) {\n    return\n  }\n\n  preload(linkElement.href)\n}\n\nfunction mouseoutListener(event) {\n  if (event.relatedTarget && event.target.closest('a') == event.relatedTarget.closest('a')) {\n    return\n  }\n\n  if (mouseoverTimer) {\n    clearTimeout(mouseoverTimer)\n    mouseoverTimer = undefined\n  }\n}\n\nfunction mousedownShortcutListener(event) {\n  if (performance.now() - lastTouchTimestamp < DELAY_TO_NOT_BE_CONSIDERED_A_TOUCH_INITIATED_ACTION) {\n    return\n  }\n\n  const linkElement = event.target.closest('a')\n\n  if (event.which > 1 || event.metaKey || event.ctrlKey) {\n    return\n  }\n\n  if (!linkElement) {\n    return\n  }\n\n  linkElement.addEventListener('click', function (event) {\n    if (event.detail == 1337) {\n      return\n    }\n\n    event.preventDefault()\n  }, {capture: true, passive: false, once: true})\n\n  const customEvent = new MouseEvent('click', {view: window, bubbles: true, cancelable: false, detail: 1337})\n  linkElement.dispatchEvent(customEvent)\n}\n\nfunction isPreloadable(linkElement) {\n  if (!linkElement || !linkElement.href) {\n    return\n  }\n\n  if (useWhitelist && !('instant' in linkElement.dataset)) {\n    return\n  }\n\n  if (!allowExternalLinks && linkElement.origin != location.origin && !('instant' in linkElement.dataset)) {\n    return\n  }\n\n  if (!['http:', 'https:'].includes(linkElement.protocol)) {\n    return\n  }\n\n  if (linkElement.protocol == 'http:' && location.protocol == 'https:') {\n    return\n  }\n\n  if (!allowQueryString && linkElement.search && !('instant' in linkElement.dataset)) {\n    return\n  }\n\n  if (linkElement.hash && linkElement.pathname + linkElement.search == location.pathname + location.search) {\n    return\n  }\n\n  if ('noInstant' in linkElement.dataset) {\n    return\n  }\n\n  return true\n}\n\nfunction preload(url) {\n  if (prefetches.has(url)) {\n    return\n  }\n\n  const prefetcher = document.createElement('link')\n  prefetcher.rel = 'prefetch'\n  prefetcher.href = url\n  document.head.appendChild(prefetcher)\n\n  prefetches.add(url)\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }"],"sourceRoot":""}